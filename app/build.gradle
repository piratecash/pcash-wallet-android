// NB: Android Studio can't find the imports; this does not affect the
// actual build since Gradle can find them just fine.
// remove after upgrading to 'com.android.tools.build:gradle:8.1.0' (AGP 8.1)
import com.android.tools.profgen.ArtProfileKt
import com.android.tools.profgen.ArtProfileSerializer
import com.android.tools.profgen.DexFile

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'com.google.devtools.ksp'
    id 'org.jetbrains.kotlin.plugin.compose' version('2.2.0')
    id 'com.google.firebase.crashlytics'
    id 'com.google.gms.google-services'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

android {

    defaultConfig {
        applicationId "cash.p.terminal"
        compileSdk compile_sdk_version
        minSdkVersion min_sdk_version
        targetSdkVersion compile_sdk_version
        versionCode 164
        versionName "0.45.4"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ksp {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
        vectorDrawables.useSupportLibrary = true
        lintOptions {
            checkReleaseBuilds false
        }

        resValue "string", "companyWebPageLink", "https://p.cash/"
        resValue "string", "appWebPageLink", "https://p.cash/#MOBILE_APPS"
        resValue "string", "analyticsLink", "https://p.cash/"
        resValue "string", "appGithubLink", "https://github.com/piratecash/pcash-wallet-android"
        resValue "string", "appTwitterLink", "https://twitter.com/PirateCash_NET"
        resValue "string", "appTelegramLink", "https://t.me/pcash"
        resValue "string", "appRedditLink", "https://www.reddit.com/r/PirateCash/"
        resValue "string", "reportEmail", "i@p.cash"
        resValue "string", "walletConnectAppMetaDataName", "pcash"
        resValue "string", "walletConnectAppMetaDataUrl", "p.cash"
        resValue "string", "walletConnectAppMetaDataIcon", "https://raw.githubusercontent.com/piratecash/pcash-wallet-ios/master/UnstoppableWallet/UnstoppableWallet/AppIcon.xcassets/AppIcon.appiconset/p.cash_1024.png"
        resValue "string", "accountsBackupFileSalt", "pcash"

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }

    buildFeatures {
        compose true
        viewBinding true
        buildConfig true
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    signingConfigs {
        appCenter {
            storeFile file("./test.keystore")
            storePassword "testKeystore123"

            keyAlias "testKeystore"
            keyPassword "testKeystore123"
        }
    }

    dependenciesInfo {
        // Disables dependency metadata when building APKs.
        includeInApk = false
        // Disables dependency metadata when building Android App Bundles.
        includeInBundle = false
    }
    
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".dev"
            resValue "string", "uniswapGraphUrl", "https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2"
            resValue "string", "is_release", "false"
            resValue "string", "guidesUrl", "https://raw.githubusercontent.com/horizontalsystems/Unstoppable-Wallet-Website/refs/tags/v1.4/src/edu.json"
            resValue "string", "faqUrl", "https://raw.githubusercontent.com/horizontalsystems/Unstoppable-Wallet-Website/master/src/faq.json"
            resValue "string", "coinsJsonUrl", "https://raw.githubusercontent.com/horizontalsystems/cryptocurrencies/master/coins.json"
            resValue "string", "providerCoinsJsonUrl", "https://raw.githubusercontent.com/horizontalsystems/cryptocurrencies/master/provider.coins.json"
//            resValue "string", "marketApiBaseUrl", "https://api-dev.blocksdecoded.com"
//            resValue "string", "marketApiKey", "IQf1uAjkthZp1i2pYzkXFDom"
            resValue "string", "blocksDecodedEthereumRpc", "https://api-dev.blocksdecoded.com/v1/ethereum-rpc/mainnet"
            resValue "string", "chainalysisBaseUrl", "https://public.chainalysis.com/api/v1/"
            resValue "string", "hashDitBaseUrl", "https://api.diting.pro/v2/hashdit/"
        }

        appcenterdebug {
            initWith debug
            defaultConfig.versionCode System.getenv("BUILD_NUMBER")?.toInteger() ?: defaultConfig.versionCode
            applicationIdSuffix ".dev.appcenter"
            signingConfig signingConfigs.appCenter
            matchingFallbacks = ['debug']
        }

        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "uniswapGraphUrl", "https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2"
            resValue "string", "is_release", "true"
            resValue "string", "guidesUrl", "https://raw.githubusercontent.com/horizontalsystems/Unstoppable-Wallet-Website/refs/tags/v1.4/src/edu.json"
            resValue "string", "faqUrl", "https://raw.githubusercontent.com/horizontalsystems/Unstoppable-Wallet-Website/v1.3/src/faq.json"
            resValue "string", "coinsJsonUrl", "https://raw.githubusercontent.com/horizontalsystems/cryptocurrencies/v0.21/coins.json"
            resValue "string", "providerCoinsJsonUrl", "https://raw.githubusercontent.com/horizontalsystems/cryptocurrencies/v0.21/provider.coins.json"
//            resValue "string", "marketApiBaseUrl", "https://api.blocksdecoded.com"
//            resValue "string", "marketApiKey", "IQf1uAjkthZp1i2pYzkXFDom"
            resValue "string", "blocksDecodedEthereumRpc", "https://api.blocksdecoded.com/v1/ethereum-rpc/mainnet"
            resValue "string", "chainalysisBaseUrl", "https://public.chainalysis.com/api/v1/"
            resValue "string", "hashDitBaseUrl", "https://service.hashdit.io/v2/hashdit/"
        }

        appcenterrelease {
            initWith release
            defaultConfig.versionCode System.getenv("BUILD_NUMBER")?.toInteger() ?: defaultConfig.versionCode
            applicationIdSuffix ".appcenter"
            signingConfig signingConfigs.appCenter
            matchingFallbacks = ['release']
        }

    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    packagingOptions {
        resources {
            pickFirsts += ['META-INF/atomicfu.kotlin_module']
            excludes += ['META-INF/INDEX.LIST', 'META-INF/DEPENDENCIES', 'META-INF/LICENSE.md', 'META-INF/NOTICE.md']
        }
        jniLibs {
            useLegacyPackaging true
        }
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    namespace 'cash.p.terminal'
    lint {
        disable 'LogNotTimber'
    }

    def bcprovVersionsToRedirect = [
            'bcprov-jdk15on:1.65.01',
            'bcprov-jdk15on:1.66',
            'bcprov-jdk15on:1.70',
            'bcprov-jdk15to18:1.65.01',
            'bcprov-jdk15to18:1.68',
            'bcprov-jdk15to18:1.69'
    ]

    configurations.all { c ->
        exclude(group: "com.github.metaplex-foundation.kborsh", module: "kborsh-jvm")
        c.resolutionStrategy.dependencySubstitution {
            bcprovVersionsToRedirect.each { moduleId ->
                def (name, version) = moduleId.split(':')
                substitute module("org.bouncycastle:$name:$version") using module("org.bouncycastle:bcprov-jdk15to18:1.80")
            }

            substitute module('com.google.protobuf:protobuf-java:3.6.1') using module('com.google.protobuf:protobuf-javalite:3.21.1')
            substitute module('net.jcip:jcip-annotations:1.0') using module('com.github.stephenc.jcip:jcip-annotations:1.0-1')

            substitute module('com.tinder.scarlet:scarlet:0.1.12') using module('com.github.WalletConnect.Scarlet:scarlet:1.0.0')
            substitute module('com.tinder.scarlet:websocket-okhttp:0.1.12') using module('com.github.WalletConnect.Scarlet:websocket-okhttp:1.0.0')
            substitute module('com.tinder.scarlet:stream-adapter-rxjava2:0.1.12') using module('com.github.WalletConnect.Scarlet:stream-adapter-rxjava2:1.0.0')
            substitute module('com.tinder.scarlet:message-adapter-gson:0.1.12') using module('com.github.WalletConnect.Scarlet:message-adapter-gson:1.0.0')
            substitute module('com.tinder.scarlet:lifecycle-android:0.1.12') using module('com.github.WalletConnect.Scarlet:lifecycle-android:1.0.0')
        }

        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.okhttp3') {
                details.useVersion "4.12.0"
            }
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':core:ui-compose')
    implementation libs.appcompat
    implementation "androidx.constraintlayout:constraintlayout:$constraint_version"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.crashlytics)
    implementation(libs.kotlinx.serialization.json)

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // use -ktx for Kotlin
    // alternatively - just LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // alternatively - Lifecycles only (no ViewModel or LiveData).
    //     Support library depends on this lightweight import
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation libs.androidx.fragment.ktx
    implementation "androidx.preference:preference-ktx:1.2.1"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation libs.bitcoinj

    //Splash screen
    implementation "androidx.core:core-splashscreen:1.0.1"

    //AppWidgets
    implementation 'androidx.glance:glance-appwidget:1.1.1'

    // Room
    implementation libs.room.runtime
    implementation libs.room.ktx
    implementation libs.androidx.room.rxjava2
    implementation libs.androidx.material3.android
    ksp libs.room.compiler

    testImplementation libs.junit.jupiter
    // alternately - if using Java8, use the following instead of compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"

    implementation libs.androidx.recyclerview

    implementation(platform(libs.koin.bom))
    implementation(libs.koin.compose.viewmodel)

    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    // (see https://github.com/ReactiveX/RxJava/releases for latest 2.x.x version)
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation 'com.squareup.retrofit2:retrofit:2.11.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.11.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.11.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.11.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation "androidx.biometric:biometric:$biometric_version"

    implementation 'com.atlassian.commonmark:commonmark:0.17.0'
    implementation "io.noties.markwon:core:4.6.2"

    // ViewPager circle indicator
    implementation 'me.relex:circleindicator:2.1.6'

    //Custom tabs, chrome
    implementation "androidx.browser:browser:1.8.0"

    // Navigation component
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_ktx_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_ktx_version"

    //Compose Navigation
    implementation libs.androidx.navigation.compose
    implementation "com.google.accompanist:accompanist-navigation-animation:$accompanist_version"

    api 'com.journeyapps:zxing-android-embedded:4.3.0'

    // QR code generator
    implementation("io.github.alexzhirkevich:qrose:1.0.1")

    // WorkManager Kotlin
    def work_version = "2.10.0"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    // WorkManager RxJava2 support
    implementation "androidx.work:work-rxjava2:$work_version"

    def leakCanary = libs.leakcanary.android
    appcenterdebugImplementation leakCanary
    debugImplementation leakCanary

    // Wallet kits
    implementation(libs.ton.kit)
    implementation(libs.ton.kotlin.contract)
    implementation libs.bitcoin.kit
    implementation libs.ethereum.kit
    implementation libs.solana.kit
    implementation libs.stellar.kit

    implementation libs.monero.kit
    implementation libs.netcipher
    implementation libs.solanakt
    implementation 'com.github.horizontalsystems:blockchain-fee-rate-kit-android:1d3bd49'
    implementation libs.tron.kit
    // Zcash SDK
    coreLibraryDesugaring libs.desugar.jdk.libs
    implementation libs.zcash.android.sdk
    implementation(libs.grpc.api)
    implementation("io.github.binance:binance-connector-java:3.0.0rc2") {
        exclude group: "org.bouncycastle", module: "bcprov-jdk18on"
    }

    // Exclude old version from wherever it's coming
    configurations.configureEach {
        exclude group: "org.bouncycastle", module: "bcprov-jdk18on"
        exclude group: "org.bouncycastle", module: "bcutil-jdk18on"
    }

    // WalletConnect V2
    implementation(platform("com.walletconnect:android-bom:1.15.0"))
    implementation 'com.walletconnect:web3wallet'
    implementation 'com.walletconnect:android-core'

    // Unstoppable Domains
    implementation 'com.github.unstoppabledomains:resolution-java:v7.1.0'

    // Ethereum Name Service
    implementation libs.web3j.core

    implementation 'com.twitter.twittertext:twitter-text:3.1.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-rx2:1.8.1'

    // UI modules

    implementation project(':core:core')
    implementation project(':core:strings')
    implementation project(':core:wallet')
    implementation project(':core:resources')
    implementation project(':core:network')
    implementation project(':core:navigation')
    implementation project(':components:icons')
    implementation project(':components:chartview')
    implementation project(':feature-stacking')
    implementation project(':feature-tangem')
    implementation project(':feature-premium')

    // Integration with activities
    implementation libs.androidx.activity.compose
    // Compose Material Design
    implementation "androidx.compose.material:material:$compose_version"
    // Animations
    implementation "androidx.compose.animation:animation:$compose_version"
    // Tooling support (Previews, etc.)
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    // Integration with ViewModels
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"
    // Lifecycle utilities for Compose
    implementation "androidx.lifecycle:lifecycle-runtime-compose:$lifecycle_version"

    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"

    def coil_version = "2.6.0"
    implementation "io.coil-kt:coil-compose:$coil_version"
    implementation "io.coil-kt:coil-svg:$coil_version"
    implementation("io.coil-kt:coil-gif:$coil_version")

    // When using a AppCompat theme
    implementation "com.google.accompanist:accompanist-appcompat-theme:$accompanist_version"
    implementation "com.google.accompanist:accompanist-flowlayout:$accompanist_version"
    implementation "com.google.accompanist:accompanist-permissions:$accompanist_version"

    // UI Tests
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // optional - Test helpers for LiveData
    testImplementation "junit:junit:$junit_version"
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    testImplementation libs.mockito.core
    testImplementation libs.mockito.kotlin.kt1.x
    testImplementation libs.powermock.api.mockito2
    testImplementation libs.powermock.module.junit4
    testImplementation libs.koin.test.junit4
    implementation libs.ktor.client.core
    implementation libs.ktor.client.okhttp

    // Spek
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:2.0.9"
    testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:2.0.9"
    testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    //Android Tor
    implementation 'info.guardianproject:tor-android:0.4.7.14'
    implementation 'info.guardianproject:jtorctl:0.4.5.7'

    api 'com.jaredrummler:android-shell:1.0.0'
    api 'com.offbynull.portmapper:portmapper:2.0.5'

    implementation libs.google.play.app.update
    implementation libs.google.play.app.update.ktx

    implementation libs.tangem.sdk
}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}


task copyChangelogs(type: Copy) {
    description = 'Copy changelog files from root to assets'
    group = 'build'

    from rootProject.projectDir
    into 'src/main/assets/common'
    include 'CHANGELOG_*.md'
    include 'changelog_*.md'

    outputs.upToDateWhen { false }

    doFirst {
        file('src/main/assets/common').mkdirs()
        println "Copying changelog files..."
    }

    doLast {
        println "Changelog files copied successfully"
    }
}

preBuild.dependsOn copyChangelogs


// fixes reproducible builds (fixes difference in assets/dexopt/baseline.profm)
// more info https://issuetracker.google.com/issues/231837768
// remove after upgrading to 'com.android.tools.build:gradle:8.1.0' (AGP 8.1)
project.afterEvaluate {
    tasks.each { task ->
        if (task.name.startsWith("compile") && task.name.endsWith("ReleaseArtProfile")) {
            task.doLast {
                outputs.files.each { file ->
                    if (file.name.endsWith(".profm")) {
                        println("Sorting ${file} ...")
                        def version = ArtProfileSerializer.valueOf("METADATA_0_0_2")
                        def profile = ArtProfileKt.ArtProfile(file)
                        def keys = new ArrayList(profile.profileData.keySet())
                        def sortedData = new LinkedHashMap()
                        // xxx ignore not resolved classes; gradle can manage
                        Collections.sort keys, new DexFile.Companion()
                        keys.each { key -> sortedData[key] = profile.profileData[key] }
                        new FileOutputStream(file).with {
                            write(version.magicBytes$profgen)
                            write(version.versionBytes$profgen)
                            version.write$profgen(it, sortedData, "")
                        }
                    }
                }
            }
        }
    }
}
